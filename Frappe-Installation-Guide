Frappe-bench installation:

// Pre-requisites

  Python 3.6+
  Node.js 14+
  Redis 5                                       (caching and real time updates)
  MariaDB 10.3.x / Postgres 9.5.x               (to run database driven apps)
  yarn 1.12+                                    (js dependency manager)
  pip 20+                                       (py dependency manager)
  wkhtmltopdf (version 0.12.5 with patched qt)  (for pdf generation)
  cron                                          (bench's scheduled jobs: automated certificate renewal, scheduled backups)
  NGINX                                         (proxying multitenant sites in production)


*************** STEP 1 First we have to Update the sudo apt ***************
 
sudo apt update

sudo apt upgrade -y


*************** STEP 2 Install python-dev ****************
sudo apt install python3-venv


*************** STEP 3 Install setuptools and pip (Python's Package Manager) ***************

// If we are using multiple python versions. Then we have to install it in python3 > 10.3

sudo apt-get install python3-setuptools python3-pip


*************** STEP 4 Install virtualenv ***************

sudo apt-get install virtualenv


// CHECK PYTHON VERSION
python3 -V


// IF VERSION IS 3.10.X RUN

sudo apt install python3.10-venv
 
 
python3 -m venv env


// Activate the virtual environment

source path_to_env/bin/activate	(source env/bin/activate)





***************** STEP 5 Install MariaDB 10.3 stable package *****************

// For Ubuntu 20.04

sudo apt-get install software-properties-common

sudo apt-key adv --fetch-keys 'https://mariadb.org/mariadb_release_signing_key.asc'

sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] https://ftp.icm.edu.pl/pub/unix/database/mariadb/repo/10.3/ubuntu focal main'

sudo apt update

sudo apt install mariadb-server



// IMPORTANT :During this installation you'll be prompted to set the MySQL root password. If you are not prompted for the same You can initialize the MySQL server setup by executing the following command


sudo mysql_secure_installation


// Steps for mysql_secure_installation
Enter current password for root (enter for none):
Just press Enter.

Set root password? [Y/n]:
Type Y and press Enter.

New password:
Enter a strong password for the root user.

Re-enter new password:
Re-enter the password you just set.

Remove anonymous users? [Y/n]:
Type Y and press Enter.

Disallow root login remotely? [Y/n]:
Type Y and press Enter.

Remove test database and access to it? [Y/n]:
Type Y and press Enter.

Reload privilege tables now? [Y/n]:
Type Y and press Enter.


// To set MYSQL ROOT Password. (Important)

// Manually Setting the Root Password
If you need to set or change the root password manually, follow these steps:

1. Log in to MariaDB as root:

sudo mysql -u root



2. Set the root password:
Once you are logged into the MariaDB shell, you can set the root password with the following commands:

MariaDB [(none)]> USE mysql;
Database changed

MariaDB [mysql]> ALTER USER 'root'@'localhost' IDENTIFIED BY 'your_new_password';
Query OK, 0 rows affected (0.001 sec)

MariaDB [mysql]> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.001 sec)

MariaDB [mysql]> EXIT;
Bye


3. Log in with the new password:

mysql -u root -p

Enter the root password when prompted.

If you can log in successfully, your root password has been set up correctly.



*************** STEP 6 MySQL database development files ***************

sudo apt-get install libmysqlclient-dev



*************** STEP 7 Edit the mariadb configuration ( unicode character encoding) ***************

sudo nano /etc/mysql/my.cnf


// Now add this to the my.cnf file

[mysqld]
character-set-client-handshake = FALSE
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci

[mysql]
default-character-set = utf8mb4


Now press (Ctrl-S) to save

Now press (Ctrl-X) to exit


// Now restart the mysql service 

sudo service mysql restart



 ***************** STEP 8 Install Redis *****************
 
 
{ **** Start of Installation Guide for redis server **** }
# Install Redis-server:
# Follow below documentation.
{ https://phoenixnap.com/kb/install-redis-on-ubuntu-20-04 }
# Follow additional steps as required for the Redis-server installation on Ubuntu 20.04.
# Step 1: Install Redis

1. Start by updating the package repository:
sudo apt update


2. Then, install Redis with the command:
sudo apt install redis-server

# If we had any errors try this command to fix it and then start with "sudo apt install redis-server"

sudo apt --fix-broken install




# Step 2: Configure Redis
1. Once the installation is complete, modify the Redis configuration file. To do so, open the file with a text editor of your choice (we are using nano):

sudo nano /etc/redis/redis.conf


2. Next, find the line specifying the supervised directive. By default, this line is set to no. However, to manage Redis as a service, set the supervised directive to systemd (Ubuntuâ€™s init system).

supervised no ---> supervised systemd


3. Save the changes and close the file.

4. Finally, restart the Redis service by running:
sudo systemctl restart redis.service


# Step 3: Verify Redis Installation
# To ensure you have set up Redis correctly, test if the service is running. Also, test the connection to the server, and whether you can set a key-value pair.


# Step 3.1: Check Redis Service Status
# Check the status of the Redis service by running the command:
sudo systemctl status redis

# The output should display the service is Active: active (running), as in the image below.


# Step 3.2: Check Redis Connection
# You should also verify the connection with the Redis server using the redis-cli tool. To connect with this command-line client, enter the following in the terminal window:

redis-cli


# This moves you to the redis-cli command prompt. To test the connectivity, run:

ping


# The output should respond with:

PONG

# The output should look like below

127.0.0.1:6379> ping
PONG
127.0.0.1:6379>


# Now, the redis-server was installed in your local successfully 

{ **** End of Installation Guide for redis server **** }




****************** STEP 9 install Node.js Latest package ******************

sudo apt-get install curl

curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -

sudo apt-get install -y nodejs


// In case if you are using nvm to handle multiple node.js versions (Node Version Manager)

1. Install nvm using the install script:

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash


1. Install Node.js 18.20.3 or any version greater than 16:

nvm install 18.20.3


2. Verify the installation:

node -v
npm -v

3. Set Node.js 18.20.3 or set it as the default version:

nvm use 18.20.4	(Important: Remember we have to use node.js grater version in venv (Virtual Environment)


nvm alias default 18.20.4	(If you want to make it as default then we can use this)



**************** STEP 10 install Yarn ****************

install Yarn


**************** STEP 11 install wkhtmltopdf ****************

// Wkhtmltopdf is an open source simple and much effective command-line shell utility that enables user to convert any given HTML (Web Page) to PDF document or an image (jpg, png, etc)


sudo apt-get install xvfb libfontconfig wkhtmltopdf


// if you have to setup production server go to Step 16 else continue

**************** STEP 12 install frappe-bench ****************
sudo -H pip3 install frappe-bench

IMPORTANT: you may wish to log out and log back into your terminal before next step and You must login.

bench --version

**************** STEP 13 initilise the frappe bench & install frappe latest version ****************

bench init frappe-bench --frappe-branch version-13

cd frappe-bench/

bench start


**************** STEP 14 create a site in frappe bench ****************

bench new-site dcode.com


**************** STEP 15 install ERPNext latest version in bench & site ****************

bench get-app erpnext --branch version-13

###OR

bench get-app https://github.com/frappe/erpnext --branch version-13

bench --site dcode.com install-app erpnext

bench start

Optional step for cratetind production setup


**************** STEP 16 Create a new user ****************

sudo adduser dcode-frappe

sudo usermod -aG sudo dcode-frappe

su - dcode-frappe

Follow the steps from Step 12 to Step 15



**************** Step 17 setup production ****************
sudo bench setup production dcode-frappe

bench restart

Open the 0.0.0.0 or server IP in web browser and login to production server

Port cofiguration for multiple site
  bench use sitename


Switch off DNS based multitenancy (once)

  bench config dns_multitenant off

Create a new site

  bench new-site site2name

Set port

   bench set-nginx-port site2name 82

Re generate nginx config

   bench setup nginx

Reload nginx

  sudo service nginx reload
  

Reload supervisor

  sudo service supervisor restart

others
  sudo add-apt-repository ppa:certbot/certbot
  sudo apt update
  sudo apt install python-certbot-nginx
  sudo certbot --nginx -d example.com
  
  ./env/bin/python -m pip install -q -U -e /apps/frappe


If you installed with --production option and you want to stop production services, and start in develop mode
  sudo service supervisor stop
  sudo service redis stop
  sudo service nginx stop


To start in develop mode, you need to have Procfile in the frappe-bench directory.
  bench setup procfile


To start develop server:
  bench start


To restart the production mode agin
  sudo service supervisor start
  sudo service redis start
  sudo service nginx start


To check on the status of services - mainly whether they are active or not
  sudo service supervisor status
  sudo service redis status
  sudo service nginx status





If we want to use the frappe bench in venv
We have to be in source /kenpath/kenpath/frappe-bench/env/bin/activate

